<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

	<groupId>br.gov.pa.prodepa.treinamentos</groupId>
    <artifactId>concursos</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>
    
    <name>Simas WEB</name>
    <description>Sistema Simas WEB TEste</description>
    <url>http://simas.pa.gov.br</url>

    <properties>
    
    	<!-- JBoss dependency versions -->
        <version.wildfly.maven.plugin>1.0.2.Final</version.wildfly.maven.plugin>
        <!-- Define the version of the JBoss BOMs we want to import to specify tested stacks. -->
        <version.jboss.bom>10.0.0.Final</version.jboss.bom>

        <!-- other plugin versions -->
        <version.compiler.plugin>3.1</version.compiler.plugin>
        <version.surefire.plugin>2.16</version.surefire.plugin>
        <version.war.plugin>2.5</version.war.plugin>
    	
        <!-- Remote Server URL -->
        <remote.server.url>http://localhost:8080/</remote.server.url>
        
        <java.min.version>1.8</java.min.version>
		<maven.min.version>3.0.0</maven.min.version>
		<plugin.enforcer.version>1.3.1</plugin.enforcer.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.test.skip>false</maven.test.skip>
    </properties>
    
   

    <dependencyManagement>
        <dependencies>
            <!-- JBoss distributes a complete set of Java EE 7 APIs including
                a Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or
                a collection) of artifacts. We use this here so that we always get the correct
                versions of artifacts. Here we use the jboss-javaee-7.0-with-tools stack
                (you can read this as the JBoss stack of the Java EE 7 APIs, with some extras
                tools for your project, such as Arquillian for testing) and the jboss-javaee-7.0-with-hibernate
                stack you can read this as the JBoss stack of the Java EE 7 APIs, with extras
                from the Hibernate family of projects) -->
            <dependency>
                <groupId>org.wildfly.bom</groupId>
                <artifactId>wildfly-javaee7-with-tools</artifactId>
                <version>${version.jboss.bom}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            
            <!-- <dependency>
            	<groupId>br.gov.pa.simas</groupId>
				<artifactId>simas-module-bom</artifactId>
				<version>1.0.1-SNAPSHOT</version>
				<type>pom</type>
                <scope>import</scope>
            </dependency> -->
        </dependencies>
    </dependencyManagement>

    <dependencies>
    
		<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>javax.servlet-api</artifactId>
		    <version>3.1.0</version>
		    <scope>provided</scope>
		</dependency>
    

        <!-- First declare the APIs we depend on and need for compilation.
            All of them are provided by JBoss WildFly -->

        <!-- Import the CDI API, we use provided scope as the API is included in JBoss WildFly -->
        <dependency>
            <groupId>javax.enterprise</groupId>
            <artifactId>cdi-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the Common Annotations API (JSR-250), we use provided
            scope as the API is included in JBoss WildFly -->
        <dependency>
            <groupId>org.jboss.spec.javax.annotation</groupId>
            <artifactId>jboss-annotations-api_1.2_spec</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the JAX-RS API, we use provided scope as the API is included in JBoss WildFly -->
        <dependency>
            <groupId>org.jboss.spec.javax.ws.rs</groupId>
             <artifactId>jboss-jaxrs-api_2.0_spec</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the JPA API, we use provided scope as the API is included in JBoss WildFly -->
        <dependency>
            <groupId>org.hibernate.javax.persistence</groupId>
            <artifactId>hibernate-jpa-2.1-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the EJB API, we use provided scope as the API is included in JBoss WildFly -->
        <dependency>
            <groupId>org.jboss.spec.javax.ejb</groupId>
            <artifactId>jboss-ejb-api_3.2_spec</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- JSR-303 (Bean Validation) Implementation -->
        <!-- Provides portable constraints such as @Email -->
        <!-- Hibernate Validator is shipped in JBoss WildFly -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Now we declare any tools needed -->

        <!-- Annotation processor to generate the JPA 2.0 metamodel classes
            for typesafe criteria queries -->
        <!-- <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-jpamodelgen</artifactId>
            <scope>provided</scope>
        </dependency> -->

        <!-- Annotation processor that raising compilation errors whenever
            constraint annotations are incorrectly used. -->
        <!-- <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator-annotation-processor</artifactId>
            <scope>provided</scope>
        </dependency> -->
        
        
        <!-- JodaTime -->
        <!-- https://mvnrepository.com/artifact/joda-time/joda-time -->
		<!-- <dependency>
		    <groupId>joda-time</groupId>
		    <artifactId>joda-time</artifactId>
		    <version>2.9.4</version>
		</dependency> -->
		
		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-lang3</artifactId>
		    <version>3.4</version>
		</dependency>
	
	
		<!-- https://mvnrepository.com/artifact/org.jboss.resteasy/resteasy-jackson2-provider -->
		<dependency>
		    <groupId>org.jboss.resteasy</groupId>
		    <artifactId>resteasy-jackson2-provider</artifactId>
		    <!-- <version>2.0.9-Final</version> -->
			<scope>provided</scope>		    
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-hibernate4 -->
		<dependency>
		    <groupId>com.fasterxml.jackson.datatype</groupId>
		    <artifactId>jackson-datatype-hibernate4</artifactId>
		    <version>2.6.3</version>
		</dependency>
		
		
		<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
		<dependency>
		    <groupId>org.slf4j</groupId>
		    <artifactId>slf4j-api</artifactId>
		    <version>1.7.21</version>
		</dependency>
		<dependency>
		    <groupId>org.slf4j</groupId>
		    <artifactId>log4j-over-slf4j</artifactId>
		    <version>1.7.21</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/log4j/log4j -->
<!-- <dependency>
    <groupId>log4j</groupId>
    <artifactId>log4j</artifactId>
    <version>1.2.17</version>
</dependency> -->
		
				
				
				
        <!-- TEST -->

        <!-- Needed for running tests (you may also use TestNG) -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>
    
    
    <licenses>
	  <license>
	    <name>Apache License, Version 2.0</name>
	    <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
	    <distribution>repo</distribution>
	    <comments>A business-friendly OSS license</comments>
	  </license>
	</licenses>
	
	<organization>
		<name>Prodepa</name>
		<url>http://prodepa.pa.gov.br</url>
	</organization>
	
	<developers>
	    <developer>
	      <id>thiago.soares</id>
	      <name>Thiago Soares</name>
	      <email>thiago.soares.jr@gmail.com</email>
	      <url>https://github.com/thiagosoares</url>
	      <organization>PRODEPA</organization>
	      <organizationUrl>http://prodepa.pa.gov.br</organizationUrl>
	      <roles>
	        <role>architect</role>
	        <role>developer</role>
	      </roles>
	      <timezone>America/Belem</timezone>
	      <properties>
	      	<gtalk>thiago.soares.jr@gmail.com</gtalk>
	      </properties>
	    </developer>
 	</developers>
 	
	<contributors>
	   <contributor>
	     <name>thiago.soares</name>
	     <email>thiago.soares.jr@gmail.com</email>
	     <url>https://github.com/thiagosoares</url>
	     <organization>PRODEPA</organization>
	     <organizationUrl>http://prodepa.pa.gov.br</organizationUrl>
	     <roles>
	       <role>architect</role>
	        <role>developer</role>
	     </roles>
	     <timezone>America/Belem</timezone>
	     <properties>
	       <gtalk>thiago.soares.jr@gmail.com</gtalk>
	     </properties>
	   </contributor>
	 </contributors>

    <build>
        <!-- Maven will append the version to the finalName (which is the
            name given to the generated war, and hence the context root) -->
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>${version.war.plugin}</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
            <!-- The WildFly plugin deploys your war to a local WildFly
                container -->
            <!-- To use, run: mvn package wildfly:deploy -->
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <version>${version.wildfly.maven.plugin}</version>
                <executions>
                    <execution>
                        <phase>install</phase>
                        <goals>
                            <goal>deploy</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>${java.min.version}</source>
					<target>${java.min.version}</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
        </plugins>
    </build>

</project>
